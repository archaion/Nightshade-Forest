# File: asciiNN+orig.cfg

# Purpose: icon configuration file

#
# Copyright (c) 1997-2009 Tim Baker
#
# This software may be copied and distributed for educational, research, and
# not for profit purposes provided that this copyright and statement are
# included in all such copies.
#

namespace eval IconCfg {
}

proc IconCfg::Load {args} {

	variable Priv

	array set cfg {
		-size 16
	}
	array set cfg $args

	set iconSize $cfg(-size)

	# Initialize the icon environment
	NSConfig::InitIcons $iconSize $iconSize icon

	# The "feature" icon type
	NSConfig::CreateIconType feature -file feature$iconSize.gif -imagesize $iconSize

	# The "feature2" icon type
	NSConfig::CreateIconType feature2 -file adam16_feature.gif -imagesize 16

	# The "adam" icon type (as in Adam Bolt)
	NSConfig::CreateIconType adam -file adam16.gif -imagesize 16

	# Synch icon data with mask data
	NSConfig::Maskify adam

	# Set up the special town layout.
	if {[variant ANGBANDTK OANGBANDTK ZANGBANDTK]} {

		# The "town" icon type
		NSConfig::CreateIconType town -file town$iconSize.gif -imagesize $iconSize

		# Create darkened copies of town icons
		for {set i 0} {$i < [icon count town]} {incr i} {
			icon dark town $i 0.86 0.59
		}

		# The "town" file is shared by all xxx.cfg files
		NSConfig::ShareConfigFile town town
	}

	if {[variant ZANGBANDTK]} {
		NSConfig::CreateIconType pattern -file pattern16.gif -imagesize 16
	}

	# Hack
	NSConfig::NoMoreIcons

	# These files are shared by all asciiNN+orig.cfg configurations
	NSConfig::ShareConfigFile alternate ascii+orig-alternate
	NSConfig::ShareConfigFile sprite ascii+orig-sprite
	NSConfig::ShareConfigFile assign ascii+orig-assign

	# Sep 6 2004
	foreach i {0 4 8 12 16 20 24 28 32 36 40} {
		icon darkhack feature $i feature [expr {$i + 1}] feature [expr {$i + 2}]
	}
	for {set i 44} {$i < 54} {incr i} {
		icon dark feature $i .75 .55
	}

	# Even more common ascii stuff
	NSConfig::SourceOne ascii-common 1
	LoadCommon

	# When entering a level, see if a custom .vlt file exists
	qebind IconCfg <Dungeon-enter> {+
		IconCfg::ChooseVault %c
	}

	return
}

proc IconCfg::Unload {} {
}

proc IconCfg::PostOp {} {

	ChooseVault [angband player depth]

	return
}

proc IconCfg::ChooseVault {depth} {

	if {!$depth} {
		if {[Global vault,town]} {
			vault tocave [Global vault,town]
			vault current [Global vault,town]
		}
	} else {
		vault current 0
	}

	return
}

