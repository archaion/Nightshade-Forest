# File: dg32+iso.cfg

# Purpose: icon configuration file

#
# Copyright (c) 1997-2009 Tim Baker
#
# This software may be copied and distributed for educational, research, and
# not for profit purposes provided that this copyright and statement are
# included in all such copies.
#

namespace eval IconCfg {
	variable Priv
}

proc IconCfg::Load {args} {

	variable Priv

	# Set parameters for isometric display
	isoconf -width 54 -height 49 -floor 27 -bottom 11 -overlapx 2 -overlapy 1

	### You must call "angband init_icons" to initialize the icon
	### environment. The argument is the size of icons to use,
	### either 16, 24 or 32.
	NSConfig::InitIcons 32 32 iso

	# This is a list of type names for David E. Gervais' graphics.
	# The actual file name is derived from the type name.

	### Transparent icons
	set data [list \
		armor effects food classm humans \
		jewls magic misc potions wands \
		weapons people dragon monster1 monster2 \
		monster3 monster4 monster5 monster6 monster7 \
		undead uniques
	]

	# Create each icon type
	foreach iconType $data {

		# Build the gif file name
		set gif dg_${iconType}32.gif

		# Load the icon data
		NSConfig::CreateIconType $iconType -file $gif -imagesize 32

		# Synch icon data with mask data
		NSConfig::Maskify $iconType
	}

	### Non-masked icons
	set data [list \
		town0 \
	]

	# Create each icon type
	foreach iconType $data {

		# Build the gif file name
		set gif dg_${iconType}32.gif

		# Load the icon data
		NSConfig::CreateIconType $iconType -file $gif -imagesize 32
	}

	# Since every wall and floor icon is transparent, I create a new icon
	# type now with each wall icon merged with the current floor icon.
	icon createtype dynamic -height 49 -width 54 -dynamic yes
	icon rle dynamic #00FFFF
	icon dynamic count dynamic 23

	# Each dynamic icon is "not transparent" because it covers a floor grid
	for {set i 0} {$i < [icon count dynamic]} {incr i} {
		icon flags dynamic $i isofloor yes
	}

	### Non-masked icons
	set data [list \
		iso \
	]

	# Create each icon type
	foreach iconType $data {

		set gif dg_${iconType}32.gif

		NSConfig::CreateIconType $iconType -file $gif -imagewidth 54 \
			-imageheight 49 -iconwidth 54 -iconheight 49 -rle #00FFFF \
			-datafile dg_${iconType}32.[icon depth].icd
	}


	if {[variant OANGBANDTK ZANGBANDTK]} {
		# Use Adam Bolt's 32x32 graphics for monsters
		NSConfig::CreateIconType adam -file adam16.gif -imagesize 16

		# Synch icon data with mask data
		NSConfig::Maskify adam
	}

	if {[variant ZANGBANDTK]} {
		# NOT ISO
	#	NSConfig::CreateIconType pattern -file pattern16.gif -imagesize 16
	}

	if {[variant ANGBANDTK OANGBANDTK ZANGBANDTK]} {
		# The "town" icon type
		# NOT ISO
	#	NSConfig::CreateIconType town -file town32.gif -imagesize 32
	}

	if {[variant OANGBANDTK ZANGBANDTK]} {
		
		NSConfig::SourceOne ascii-common 1
		LoadCommon

	# OANGBANDTK, ZANGBANDTK
	}

	# Hack
	NSConfig::NoMoreIcons

	if {[variant ANGBANDTK OANGBANDTK ZANGBANDTK]} {
		# The "town" file is shared by all xxx.cfg files
		NSConfig::ShareConfigFile town town
	}

	# Don't do this for ascii+dg32
	if {[string match dg32* [Global config,prefix]]} {

		# Assign an icon to each flavored object
		NSConfig::SourceOne config-flavor 1

		# Assign pile icon to "object 0"
		assign set object 0 "icon misc 54"
		
		# Assign an icon to the character
		NSConfig::SourceOne dg32-common 1
		AutoAssignCharacterIcon
	}

	set Priv(depth) -1
	set Priv(which) -1

	qebind IconCfg <Dungeon-enter> {+
		IconCfg::ChooseTheme %c
		IconCfg::ChooseVault %c
	}

	qebind IconCfg <Dungeon-generate> {
		if {%c && (%c == $IconCfg::Priv(depth))} {
			set $IconCfg::Priv(depth) -1
		}
	}

	for {set i 0} {$i < [icon count iso]} {incr i} {
		icon dark iso $i 0.9 0.8
	}

	# Darkness
	assign set feature 0 "icon iso 208"
	icon dark iso 208 1.0 1.0
	icon flags iso 208 isofloor yes

	# Doors
	foreach i {64 68 93 97 124 128 155 159} {
		icon flags iso $i left yes
	}
	foreach i {65 69 94 98 125 129 156 160} {
		icon flags iso $i right yes
	}

	# Mark certain isometric icons as "non-transparent"
	for {set i 0} {$i <= 33} {incr i} {
		icon flags iso $i isofloor yes
	}
	for {set i 39} {$i <= 43} {incr i} {
		icon flags iso $i isofloor yes
	}
	for {set i 55} {$i <= 63} {incr i} {
		icon flags iso $i isofloor yes
	}
	icon flags iso 70 isofloor yes
	icon flags iso 101 isofloor yes
	icon flags iso 132 isofloor yes

	return
}

proc IconCfg::Unload {} {
}

proc IconCfg::PostOp {} {

	ChooseTheme [angband player depth]
	ChooseVault [angband player depth]

	return
}

proc IconCfg::constList {args} {

	set result {}
	foreach name $args {
		lappend result [const $name]
	}
	return $result
}

proc IconCfg::ChooseTheme {depth} {

	variable Priv

	set feats [constList FEAT_WALL_EXTRA FEAT_PERM_EXTRA FEAT_MAGMA FEAT_QUARTZ \
		FEAT_MAGMA_K FEAT_QUARTZ_K]

	# Light smooth
	lappend wall 71
	lappend single 70
	lappend floor 13
	lappend door 93
	lappend stair 99

	# Light rough
	lappend wall 82
	lappend single 70
	lappend floor 13
	lappend door 93
	lappend stair 99

	# Dark smooth
	lappend wall 102
	lappend single 101
	lappend floor 13
	lappend door 124
	lappend stair 130

	# Dark rough
	lappend wall 113
	lappend single 101
	lappend floor 15
	lappend door 124
	lappend stair 130

	# Tan smooth
	lappend wall 133
	lappend single 132
	lappend floor 11
	lappend door 155
	lappend stair 161

	# Tan rough
	lappend wall 144
	lappend single 132
	lappend floor 11
	lappend door 155
	lappend stair 161

	# 1-6 are shaped, 7-10 are not
	# May 8 2009 - Don't use shapeless blocks, too hard to play with
if 1 {
	set which [expr int(rand() * 8)]
} else {
	set which [expr int(rand() * 10)]
}

	# Force white smooth (shapeless) brick in town
	if {!$depth} {
		set which 9
	}

	if {$depth && ($Priv(depth) == $depth)} {
		set which $Priv(which)
	}

	# Darkness
	scan [assign set feature 0] "%s %s %d" icon darkType darkIndex
	if {[icon dark $darkType $darkIndex] != "1.0 1.0"} {
		icon dark $darkType $darkIndex 1.0 1.0
	}

	set shapes [list ns we corner_nw corner_ne corner_sw corner_se \
		tri_n tri_w tri_e tri_s quad]

	# The icon type created above called "dynamic" will now be
	# set by copying icon data from the "iso" icon type.  The feature icon
	# is copied overtop the floor icon.  Creating the combined icon
	# improves performance (otherwise we would have to use icon layers).

	if {$which < 6} {

		set wall [lindex $wall $which]
		set single [lindex $single $which]
		set floor [lindex $floor $which]
		set door [lindex $door $which]
		set stair [lindex $stair $which]

		assign set feature [const FEAT_FLOOR] "icon iso $floor"

		set offsets [list 0 1 5 2 4 3 7 6 8 9 10]
		set j 0
		foreach shape $shapes offset $offsets {
			icon dynamic blank dynamic $j
			icon dynamic copy dynamic $j -type iso -index $floor
			icon dynamic copy dynamic $j -type iso -index [expr {$wall + $offset}]
			set dynamic($shape) $j

			# Now use the same wall but on the unknown/dark floor.
			set k [expr {11 + $j}]
			icon dynamic blank dynamic $k
			icon dynamic copy dynamic $k -type iso -index $darkIndex ; # unknown
			icon dynamic copy dynamic $k -type iso -index [expr {$wall + $offset}]
			set dynamic($shape,outer) $k

			incr j
		}

		foreach f_idx $feats {

			# Not necessary
			assign set feature $f_idx "icon default 0"

			feature assignshape $f_idx single "icon iso $single"
			foreach shape $shapes {

				# Feature on known/lit floor
				feature assignshape $f_idx $shape "icon dynamic $dynamic($shape)"

				# Feature on unknown/dark floor
				feature assignshape $f_idx $shape "icon dynamic $dynamic($shape,outer)" hack
			}

			# Background is self
			feature configure $f_idx -background $f_idx
		}
	}

	if {$which >= 6} {

		if {$which == 6} {

			# Brown stalagmite
			set wall 56

			# Brown floor
			set floor 55

			# Wood door
			set door 64
			
			set stair 161 ; # tan

		} elseif {$which == 7} {

			# Black stalagmite
			set wall 59

			# Black floor
			set floor 15

			# Black door
			set door 124

			# Black stair
			set stair 130

icon dark iso $floor .9 .8

		} elseif {$which == 8} {

			# Dark block
			set wall 101

			# Brown floor
			set floor 55

			# Wood door
			set door 124

			# Black stair
			set stair 130

		} else {

			# White block
			set wall 70

			# Light
			set floor 13

			# White door
			set door 93

			# White stair
			set stair 99
		}

		foreach f_idx $feats {

			# Shapeless
			feature assignshape $f_idx single "icon default 0"
			foreach shape $shapes {

				# Feature on known/lit floor
				feature assignshape $f_idx $shape "icon default 0"

				# Feature on unknown/dark floor
				feature assignshape $f_idx $shape "icon default 0" hack
			}

			# Same icon for each wall type
			assign set feature $f_idx "icon iso $wall"

			# Background is self
			feature configure $f_idx -background $f_idx
		}

		assign set feature [const FEAT_FLOOR] "icon iso $floor"
	}

	set f_idx [const FEAT_OPEN]
	assign set feature $f_idx "icon default 0"
	feature assignshape $f_idx ns "icon iso $door"
	feature assignshape $f_idx we "icon iso [expr $door + 1]"

	set f_idx [const FEAT_BROKEN]
	assign set feature $f_idx "icon default 0"
	feature assignshape $f_idx ns "icon iso [expr $door + 4]"
	feature assignshape $f_idx we "icon iso [expr $door + 5]"

	set f_idx [const FEAT_DOOR_HEAD]
	assign set feature $f_idx "icon default 0"
	feature assignshape $f_idx ns "icon iso [expr $door + 2]"
	feature assignshape $f_idx we "icon iso [expr $door + 3]"

	# Up stair
	assign set feature [const FEAT_LESS] "icon iso $stair"

	# Down stair
	assign set feature [const FEAT_MORE] "icon iso [expr $stair + 1]"

	if {[variant KANGBANDTK ZANGBANDTK]} {
		# Quest entrances/exits
		foreach f_idx [list [const FEAT_QUEST_EXIT] [const FEAT_QUEST_UP]] {
			assign set feature $f_idx "icon iso $stair"
		}
		foreach f_idx [list [const FEAT_QUEST_ENTER] [const FEAT_QUEST_DOWN]] {
			assign set feature $f_idx "icon iso [expr {$stair + 1}]"
		}
	}


	if {[variant KANGBANDTK ZANGBANDTK]} {
		# Tree
		if {$depth} {
			set tree 48
		} else {
			set assign [assign set feature [const FEAT_GRASS]]
			scan $assign "%s %s %d" type type floor
			set tree 47
		}
		set j [expr {[icon count dynamic] - 1}]
		icon dynamic blank dynamic $j
		icon dynamic copy dynamic $j -type iso -index $floor
		icon dynamic copy dynamic $j -type iso -index $tree
		assign set feature [const FEAT_TREES] "icon dynamic $j"
	}

	for {set i 0} {$i < [icon count dynamic]} {incr i} {
		icon dark dynamic $i 0.9 0.8
	}

	# Remember which icons were chosen.
	if {$depth} {
		set Priv(which) $which
		set Priv(depth) $depth
	}

	return
}

if {[variant ANGBANDTK OANGBANDTK]} {

proc IconCfg::ChooseVault {depth} {

	if {!$depth} {
		if {[Global vault,town]} {
			vault tocave [Global vault,town]
			vault current [Global vault,town]
		}
	} else {
		vault current 0
	}

	return
}

}

if {[variant KANGBANDTK]} {

proc IconCfg::ChooseVault {depth} {

	# Unset the current vault
	vault current 0

	set prefix [Global config,prefix]

	# No .vlt in arena
	if {[angband player inside_arena]} return

	# Look for a .vlt file for the current quest
	if {[angband player inside_quest]} {
		set index [angband player inside_quest]
		set name q[format %07d $index]-$prefix.vlt
		set path [PathTk config $name]
		if {[file exists $path]} {
			vault current [Global vault,current]
			vault read [vault current] $path
		}
		return
	}

	# No .vlt for regular dungeon
	if {$depth} return

	# Look for .vlt for current town
	vault current [Global vault,town]

	return
}

# KANGBANDTK
}

if {[variant ZANGBANDTK]} {

# When entering a town, see if a vault file for that town exists and
# read it in. This requires some knowledge of the t_info.txt file for
# determining which town file (and therefore which vault file) is used.

proc IconCfg::ChooseVault {depth} {

	# Unset the current vault
	vault current 0

	if {$depth} return
	if {[struct set player_type 0 inside_arena]} return
	if {[struct set player_type 0 inside_quest]} return

	set town_num [struct set player_type 0 town_num]
	if {!$town_num} return

	switch -- $town_num {
		1 {
			if {[angband setting set vanilla_town]} {
				set name t_basic
			} elseif {[angband setting set lite_town]} {
				set name t_lite
			} else {
				set name t0000001
			}
		}
		default {
			set name t000000$town_num
		}
	}
	append name -[Global config,prefix].vlt
	set path [PathTk config $name]
	if {[file exists $path]} {
		vault current [Global vault,current]
		vault read [vault current] $path
		return
	}

	if {[Global vault,town]} {
		vault tocave [Global vault,town]
		vault current [Global vault,town]
	}

	return
}

# ZANGBANDTK
}

