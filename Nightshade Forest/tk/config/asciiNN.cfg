# File: asciiNN.cfg

# Purpose: icon configuration file

#
# Copyright (c) 1997-2009 Tim Baker
#
# This software may be copied and distributed for educational, research, and
# not for profit purposes provided that this copyright and statement are
# included in all such copies.
#

namespace eval IconCfg {
}

proc IconCfg::Load {args} {

	variable Priv

	array set cfg {
	}
	array set cfg $args

	set font [Value font,ascii]

	if {[Value ascii,height] > 0} {
		set iconHeight [Value ascii,height]
	} else {
		set iconHeight [font metrics $font -linespace]
	}

	# Min/Max enforced by Icon_Setup()
	if {$iconHeight < 10} {
		set iconHeight 10
	}
	if {$iconHeight > 48} {
		set iconHeight 48
	}
		
	if {[Value ascii,square]} {
		set iconWidth $iconHeight
	} elseif {[Value ascii,width] > 0} {
		set iconWidth [Value ascii,width]
	} else {
		# Get width of widest char
if 1 {
		set iconWidth 0
		for {set ascii 32} {$ascii < 128} {incr ascii} {
			set charWidth [font measure $font [format %c $ascii]]
			if {$charWidth > $iconWidth} {
				set iconWidth $charWidth
			}
		}
} else {
		set iconWidth 0
		foreach char [split ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ""] {
			set charWidth [font measure $font $char]
			if {$charWidth > $iconWidth} {
				set iconWidth $charWidth
			}
		}
}
	}

	# Min/Max enforced by Icon_Setup()
	if {$iconWidth < 10} {
		set iconWidth 10
	}
	if {$iconWidth > 48} {
		set iconWidth 48
	}

	# Initialize the icon environment
	NSConfig::InitIcons $iconWidth $iconHeight icon

	# Include common ascii stuff
	NSConfig::SourceOne ascii-common 1
	LoadCommon $font
	set color $Priv(color)

	# Hack
	NSConfig::NoMoreIcons

	# Ascii attributes for lighting TERM_WHITE features
	set light1 9
	set light2 2

	# Collect attr/char assigned to features
	for {set i 0} {$i < 16} {incr i} {
		set charset($i) {}
	}
	set max_f_idx [angband f_info max]
	for {set f_idx 0} {$f_idx < $max_f_idx} {incr f_idx} {
		set d_char [angband f_info set $f_idx d_char]
		if {$d_char eq ""} continue
		set d_attr [angband f_info set $f_idx d_attr]
		lappend charset($d_attr) $d_char
		if {$d_attr == 1} {
			lappend charset($light1) $d_char
			lappend charset($light2) $d_char
		}
	}
	for {set i 0} {$i < 16} {incr i} {
		set charset($i) [join [lsort -ascii -unique $charset($i)] ""]
	}

	set bgF [Value ascii,feature,bg]
	set bgF1 [Value ascii,feature1,bg]
	set bgF2 [Value ascii,feature2,bg]

	# Create 16 ascii attributes (for features, 3 light radiuses)
	foreach radius {"" 1 2} {
		set attr(feature$radius) [icon ascii count]
		set i 0
		foreach paletteIndex $color {
			icon ascii create -foreground [palette set $paletteIndex] \
				-background [palette set [set bgF$radius]]
			if {$charset($i) ne ""} {
				set type ascii$i
				if {$radius ne ""} {
					append type .$radius
				}
				icon createtype $type -font $font -charset $charset($i)

				# Convert ascii-type icon to non-ascii for performance.
				icon ascii convert $type [expr {$attr(feature$radius) + $i}]
			}
			incr i
		}
	}

	# Features
	set max_f_idx [angband f_info max]
	for {set f_idx 0} {$f_idx < $max_f_idx} {incr f_idx} {
		set f_char [angband f_info set $f_idx d_char]
		if {$f_char eq ""} continue
		set f_attr [angband f_info set $f_idx d_attr]
		set index [icon ascii index ascii$f_attr $f_char]
		set ascii [expr {$f_attr + $attr(feature)}]

		# TERM_WHITE = 1
		if {$f_attr == 1} {
			# TERM_SLATE = 2 TERM_L_DARK = 8 TERM_L_WHITE = 9
			set index1 [icon ascii index ascii$light1.1 $f_char]
			set index2 [icon ascii index ascii$light2.2 $f_char]
			icon darkhack ascii$f_attr $index ascii$light1.1 $index1 ascii$light2.2 $index2
		} else {
			set index1 [icon ascii index ascii$f_attr.1 $f_char]
			set index2 [icon ascii index ascii$f_attr.2 $f_char]
			icon darkhack ascii$f_attr $index ascii$f_attr.1 $index1 ascii$f_attr.2 $index2
		}
		assign set feature $f_idx "icon ascii$f_attr $index"
	}

	# Spell ball/bolt effects
	set attr(bolt) [icon ascii count]
	foreach paletteIndex $color {
		icon ascii create -foreground [palette set $paletteIndex] \
			-background [palette set $bgF]
	}
	set type bolt
	icon createtype $type -font $font -charset {|-/\*}
	foreach name [effect names bolt] {
		effect assign bolt $name -type $type -index 0 -ascii [expr {$attr(bolt) + [effect color $name]}]
	}
	foreach name [effect names ball] {
		effect assign ball $name -type $type -index 4 -ascii [expr {$attr(bolt) + [effect color $name]}]
	}


	if 0 {
	# Give walls a different background color
	set attr(feature2) [icon ascii count]
	foreach paletteIndex $color {
		icon ascii create -foreground [palette set $paletteIndex] \
			-background [palette set 253]
	}
	foreach f_idx [angband f_info find -name wall -name secret] {
		set f_char [angband f_info set $f_idx d_char]
		set f_attr [angband f_info set $f_idx d_attr]
		set index [icon ascii index ascii $f_char]
		set ascii [expr {$f_attr + $attr(feature2)}]
		assign set feature $f_idx "icon ascii $index $ascii"
	}
	}

	# When entering a level, see if a custom .vlt file exists
	qebind IconCfg <Dungeon-enter> {+
		IconCfg::ChooseVault %c
	}

	return
}

proc IconCfg::Unload {} {
}

proc IconCfg::PostOp {} {

	ChooseVault [angband player depth]

	return
}

proc IconCfg::ChooseVault {depth} {

	if {!$depth} {
#		if {[Global vault,town]} {
#			vault tocave [Global vault,town]
#			vault current [Global vault,town]
#		}
	} else {
		vault current 0
	}

	return
}

